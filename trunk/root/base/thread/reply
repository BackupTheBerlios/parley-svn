<div id="logger"></div>
<h1>
[% current_forum.name %]
&nbsp;:&nbsp;
[% current_thread.subject %]
</h1>

[%# different action depending on whether we're adding to a thread or replying to a specific post %]
[% IF current_post %]
<form action="thread/reply?post=[% current_post.id %]" method="POST" name="new_thread">
[% ELSE %]
<form action="thread/reply?thread=[% current_thread.id %]" method="POST" name="new_thread">
[% END %]

<!-- The post we're replying to -->
<table>
  <tr>
    <td class="post_subject">
      [% responding_to_post.subject %]
    </td>
    <td class="post_creator">
      [% responding_to_post.creator.forum_name %]
    </td>
    <td class="post_created">
      [% nicedate(responding_to_post.created) %]
    </td>
  </tr>
  
  <tr>
    <td colspan="3" class="reply_post_message">
      <div class="innerpost">
      [% FILTER html_line_break %][% HTML.escape(responding_to_post.message) %][% END %]
      </div>
    </td>
  </tr>
</table>

[% IF messages %]
<p>
    <ul>
        [% FOREACH message IN messages %]
            <li>[% message %]</li>
        [% END %]
    </ul>
</p>
[% END %]

    
<p>Please enter your reply in the form below:</p>


<table>
  [% IF c.config.replies_have_own_subject %]
  <tr>
    <td> Topic </td>
    <td>
      <input type="text" name="thread_subject" size="60" class="input_text" value="[% current_thread.subject %]" />
    </td>
  </tr>
  [% END %]

  [% IF quote_post %]
  <input type="hidden" name="have_quoted_post" value="1" />
  <input type="hidden" name="__post" value="[% quote_post.id %]" />
  <tr>
  <td>&nbsp;</td>
  <td>
    <span class="post_creator">
      [% quote_post.creator.forum_name %] said:
    </span>
    <br />
    <textarea name="quote_message" cols="60" rows="10" class="quoted_reply_textarea" />[% quote_post.message %]</textarea>
  </td>
  </tr>
  [% END %]

  <tr valign="top">
    <td> Message </td>
    <td>
        <div id="message_container"></div>
        <textarea name="thread_message" id="thread_message" cols="60" rows="20" class="input_text" /></textarea>
    </td>
  </tr>

  <tr>
    <td colspan="2" style="text-align: center;">
      <input type="button" value="Preview"   name="post_reply" class="input_button" id="message_preview" />
      <input type="submit" value="Add Reply" name="post_reply" class="input_button" />
    </td>
  </tr>

  [% IF moderator %]
  <tr>
    <td colspan="2" align="right">
        <input type="checkbox" name="lock_thread" value="1" /> Lock thread after posting
    </td>
  </tr>
  [% END %]
  <tr>
    <td colspan="2" align="right">
        <input type="checkbox" name="watch_on_post" value="1" [% IF authed_user.preference.watch_on_post %]checked="checked" [% END %]/>
        Add a Thread Watch
    </td>
  </tr>
</table>
</form>

<style type="text/css">
	.yui-overlay { position:absolute;background:transparent;border:none;padding:none;margin:none;overflow:auto; }
</style>

<!-- message preview majick -->
<script type="text/javascript">
    (function () {
        ParleyMessagePreview = function() {
            var Dom         = YAHOO.util.Dom,
                YU          = YAHOO.util;

            this.config = {
                trigger     : 'message_preview',
                user_input  : 'thread_message',
                container   : 'message_container',
                trigger_evt : 'click'
            };
            this.message_source  = false;
            this.message_preview = false;

            this.handleSuccess = function(o) {
                var data = eval('(' + o.responseText + ')');
                var obj = o.argument.obj;

                if (data.formatted) {
                    obj.previewElId = YU.Dom.generateId();

                    obj.user_input.style.visibility     = 'hidden';

                    /* create a panel to show the preview in */
                    var pWidth          = obj.user_input.clientWidth,
                        pHeight         = obj.user_input.clientHeight,
                        pLeft           = obj.user_input.offsetLeft,
                        pTop            = obj.user_input.offsetTop;

                    obj.preview_overlay = new YAHOO.widget.Overlay(
                        "preview_overlay",
                        {
                            context:        [obj.config.user_input, 'tl', 'tl'],
                            visible:        true,
                            width:          obj.user_input.clientWidth  + 'px',
                            height:         obj.user_input.clientHeight + 'px'
                        }
                    );
                    obj.preview_overlay.setBody(data.formatted);
                    obj.preview_overlay.render(document.body);


                    // update the button
                    obj.trigger.value = 'Edit';

                    YU.Event.removeListener( obj.trigger, 'click' );
                    YU.Event.addListener(
                        obj.trigger,
                        obj.config.trigger_evt,
                        obj.edit,
                        obj,
                        true
                    );

                }
            };
            this.handleFailure = function(o) {
                console.log('failure');
            };

            this.edit = function() {
                // update the button
                this.trigger.value = 'Preview';

                this.user_input.style.visibility     = 'visible';
                this.preview_overlay.destroy();

                YU.Event.removeListener( this.trigger, 'click' );
                YU.Event.addListener(
                    this.trigger,
                    this.config.trigger_evt,
                    this.preview,
                    this,
                    true
                );
            };

            this.preview = function() {
                var request = YU.Connect.asyncRequest(
                    'POST',
                    '[%base%]post/preview',
                    {
                        success: this.handleSuccess,
                        failure: this.handleFailure,
                        argument: {
                            obj: this
                        }
                    },
                    'msg_source=' + escape(this.user_input.value)
                );
            };

            this.init = function() {
                this.container  = Dom.get( this.config.container );
                this.user_input = Dom.get( this.config.user_input );
                this.trigger    = Dom.get( this.config.trigger );

                YU.Event.addListener(
                    this.trigger,
                    this.config.trigger_evt,
                    this.preview,
                    this,
                    true
                );
            };
        };
    })();

    var MessagePreview = new ParleyMessagePreview();
    MessagePreview.init();
</script>
<!-- (end) message preview majick -->
